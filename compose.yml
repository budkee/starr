services:

  # VPN | Tailscale Client
  tailscale:
    container_name: tailscale
    image: tailscale/tailscale:latest
    hostname: internalscale
    env_file:
      - ".env"
    volumes:
      - ${TS_STATE_DIR}:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
  
  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - tailscale
    network_mode: service:tailscale
  
  # Deluge | Torrent Client
  # deluge:
  #   container_name: deluge
  #   image: linuxserver/deluge:latest
  #   env_file:
  #     - ".env"
  #   volumes:
  #     - "${ROOT}/MediaCenter/config/deluge:/config"
  #     - "${HDDSTORAGE}:/MediaCenterBox"
  #   depends_on: #comment/remove if you are not using the VPN
  #     - 'tailscale-vpn' #comment/remove if you are not using the VPN
  #   network_mode: "service:tailscale-vpn" #comment/remove if you are not using the VPN
  #   restart: unless-stopped

volumes:
  tailscale-run:

  # Homarr | Dashboard
  # homarr:
  #   container_name: homarr
  #   image: ghcr.io/ajnart/homarr:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ${ARRPATH}Homarr/configs:/app/data/configs
  #     - ${ARRPATH}Homarr/icons:/app/public/icons
  #     - ${ARRPATH}Homarr/data:/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - '7575:7575'
  #   env_file:
  #     - '.env'


  # qBittorrent | Torrent Client (optional)
  # qbittorrent:
  #   image: linuxserver/qbittorrent:latest
  #   container_name: qbittorrent
  #   hostname: qbittorrent
  #   restart: unless-stopped
  #   labels:
  #     - "com.centurylinklabs.watchtower.enable=false"
  #   volumes:
  #     - ${ARRPATH}qbittorrent/config:/config
  #     - ${ARRPATH}Downloads:/downloads
  #   ports:
  #     - 8080:8080
  #     - 6881:6881
  #     - 6881:6881/udp
  #   environment:
  #     - WEBUI_PORT=8080
  #     - TORRENTING_PORT=6881
  #   healthcheck:
  #     start_period: 15s
  #   env_file:
  #     - '.env'

  # Prowlarr | Indexer Manager
  # prowlarr:
  #   image: lscr.io/linuxserver/prowlarr:latest
  #   container_name: prowlarr
  #   volumes:
  #     - "${ROOT}/MediaCenter/config/prowlarr:/config"
  #   restart: unless-stopped
  #   ports:
  #     - "9696:9696" #uncomment if you are not using the VPN
  #   env_file:
  #     - ".env"

  # Sonarr | TV Show Manager
  # sonarr:
  #   container_name: sonarr
  #   image: "linuxserver/sonarr:latest"
  #   restart: unless-stopped
  #   network_mode: host
  #   volumes:
  #     - "/etc/localtime:/etc/localtime:ro"
  #     - "${ROOT}/MediaCenter/config/sonarr:/config"
  #     - "${HDDSTORAGE}:/MediaCenterBox"
  #   env_file:
  #     - ".env"

  # Radarr | Movie Manager
  # radarr:
  #   container_name: radarr
  #   image: "linuxserver/radarr:latest"
  #   restart: unless-stopped
  #   network_mode: host
  #   volumes:
  #     - "/etc/localtime:/etc/localtime:ro"
  #     - "${ROOT}/MediaCenter/config/radarr:/config"
  #     - "${HDDSTORAGE}:/MediaCenterBox"
  #   env_file:
  #     - ".env"

  # Bazarr | Subtitles Manager
  # bazarr:
  #   container_name: bazarr
  #   image: "linuxserver/bazarr:latest"
  #   restart: unless-stopped
  #   #network_mode: host
  #   volumes:
  #     - "${ROOT}/MediaCenter/config/bazarr:/config"
  #     - "${HDDSTORAGE}:/MediaCenterBox"
  #   ports:
  #     - "6767:6767"
  #   env_file:
  #     - ".env"

  # Plex | Media Server
  # plex-server:
  #   container_name: plex-server
  #   image: "plexinc/pms-docker:latest"
  #   restart: unless-stopped
  #   network_mode: host
  #   volumes:
  #     - "${ROOT}/MediaCenter/config/plex/db:/config"
  #     - "${ROOT}/MediaCenter/config/plex/transcode:/transcode"
  #     - "${HDDSTORAGE}/Completed:/MediaCenterBox"
  #   env_file:
  #     - ".env"

  # Jellyfin | Media Server (optional)
  # jellyfin:
  #   image: linuxserver/jellyfin
  #   container_name: jellyfin
  #   ports:
  #     - '8096:8096/tcp'   # Jellyfin web interface
  #     - '7359:7359/udp'   # Network discovery
  #     - '1900:1900/udp'   # DLNA port
  #   volumes:
  #     - ${ARRPATH}Jellyfin/config:/config
  #     - ${ARRPATH}Radarr/movies:/data/Movies
  #     - ${ARRPATH}Sonarr/tvshows:/data/TVShows
  #     - ${ARRPATH}Lidarr/music:/data/Music
  #     - ${ARRPATH}Readarr/books:/data/Books
  #   env_file:
  #     - '.env'
  #   restart: unless-stopped

  # Lidarr | Music Manager
  # lidarr:
  #   image: linuxserver/lidarr:latest
  #   container_name: lidarr
  #   hostname: lidarr
  #   volumes:
  #     - ${ARRPATH}Lidarr/config:/config
  #     - ${ARRPATH}Lidarr/music:/data/musicfolder
  #     - ${ARRPATH}Downloads:/downloads
  #   ports:
  #     - 8686:8686
  #   restart: unless-stopped
  #   env_file:
  #     - ".env"

  # Readarr | Book Manager
  # readarr:
  #   image: linuxserver/readarr:develop
  #   container_name: readarr
  #   hostname: readarr
  #   volumes:
  #     - ${ARRPATH}Readarr/config:/config
  #     - ${ARRPATH}Readarr/books:/data/books
  #     - ${ARRPATH}Downloads:/downloads
  #   ports:
  #     - 8787:8787
  #   restart: unless-stopped
  #   env_file:
  #     - ".env"


# -------------- References -------------- #
# https://github.com/automation-avenue/youtube-39-arr-apps-1-click.git
# https://github.com/Rick45/quick-arr-Stack.git

# TSDProxy | Tailscale Docker Proxy
# https://www.youtube.com/watch?v=5lJrXEXF8eM&ab_channel=Tailscale
# https://almeidapaulopt.github.io/tsdproxy/
